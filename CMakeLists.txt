#---------------------------------------------------------------------------------------------------
# CMake Build Configuration for the Ray Tracing Weekend Series
#
# See README.md for guidance.
#---------------------------------------------------------------------------------------------------

cmake_minimum_required ( VERSION 3.1.0...4.0.0 )

# Option to choose compiler (set before project())
# Usage: cmake .. -DUSE_CLANG=OFF
option(USE_CLANG "Use Clang compiler instead of GCC" ON)

if(USE_CLANG)
    set(CMAKE_C_COMPILER "clang")
    set(CMAKE_CXX_COMPILER "clang++")
    message(STATUS "Using Clang compiler")
endif()

project ( 302_RAYTRACE LANGUAGES CXX CUDA )

# Set default build type to Release if not specified
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build (Debug or Release)" FORCE)
endif()

message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")

set ( CMAKE_CXX_STANDARD          17 )
set ( CMAKE_CXX_STANDARD_REQUIRED ON )
set ( CMAKE_CXX_EXTENSIONS        OFF )

# CUDA settings
include(CheckLanguage)
check_language(CUDA)
if(CMAKE_CUDA_COMPILER)
    enable_language(CUDA)
    set(CMAKE_CUDA_STANDARD 17)
    set(CMAKE_CUDA_STANDARD_REQUIRED ON)
    set(CMAKE_CUDA_SEPARABLE_COMPILATION ON)
    
    # Enable parallel CUDA compilation for faster builds
    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -t 0")
    
    message(STATUS "CUDA found and enabled")
    set(CUDA_FOUND TRUE)
else()
    message(WARNING "CUDA not found. CUDA functionality will be disabled.")
    set(CUDA_FOUND FALSE)
endif()

# Source
set ( EXTERNAL
  src/external/stb_image_write.h
  src/external/stb_image.h
)

set ( SOURCE_302_RAYTRACER
  src/302_raytracer/utils.h
  src/302_raytracer/main.cc
  src/302_raytracer/vec3.h
  src/302_raytracer/color.h
  src/302_raytracer/sphere.h
  src/302_raytracer/material.h
  src/302_raytracer/hittable.h
  src/302_raytracer/hittable_list.h
  src/302_raytracer/interval.h
  src/302_raytracer/rnd_gen.h
  src/302_raytracer/camera.h
  src/302_raytracer/camera_cuda.cu
  src/302_raytracer/camera_cuda.h
)

include_directories(src)

# Ensure compile_commands.json is generated in the source directory
set(CMAKE_COMPILE_COMMANDS_OUTPUT_DIR ${CMAKE_SOURCE_DIR})
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Specific compiler flags below. We're not going to add options for all possible compilers, but if
# you're new to CMake, the following may be a helpful example if you're using a
# different compiler or want to set different compiler options.
message (STATUS "Compiler ID: " ${CMAKE_CXX_COMPILER_ID})
message (STATUS "Release flags: " ${CMAKE_CXX_FLAGS_RELEASE})
message (STATUS "Debug flags: " ${CMAKE_CXX_FLAGS_DEBUG})

# Set to C++17
include(ProcessorCount)
ProcessorCount(N)
message(STATUS "Number of processor cores: " ${N})
if(NOT N EQUAL 0)
    math(EXPR PARALLEL_CORES "${N} - 2")
    if(PARALLEL_CORES LESS 1)
        set(CMAKE_BUILD_PARALLEL_LEVEL 1)
    else()
        set(CMAKE_BUILD_PARALLEL_LEVEL ${PARALLEL_CORES})
    endif()
    message(STATUS "Setting parallel build level to: " ${CMAKE_BUILD_PARALLEL_LEVEL})
endif()

# Ninja-specific optimizations
if(CMAKE_GENERATOR STREQUAL "Ninja")
    message(STATUS "Using Ninja generator - enabling optimizations")
    # Enable colored output for Ninja builds (CXX only, not CUDA)
    if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        add_compile_options("$<$<COMPILE_LANGUAGE:CXX>:-fdiagnostics-color=always>")
    elseif(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
        add_compile_options("$<$<COMPILE_LANGUAGE:CXX>:-fcolor-diagnostics>")
    endif()
endif()

if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    # Apply these warnings only to C++ files, not CUDA
    add_compile_options("$<$<COMPILE_LANGUAGE:CXX>:-Wnon-virtual-dtor>") # Class has virtual functions, but its destructor is not virtual
    add_compile_options("$<$<COMPILE_LANGUAGE:CXX>:-Wreorder>") # Data member will be initialized after [other] data member
    add_compile_options("$<$<COMPILE_LANGUAGE:CXX>:-Wmaybe-uninitialized>") # Variable improperly initialized
    add_compile_options("$<$<COMPILE_LANGUAGE:CXX>:-Wunused-variable>") # Variable is defined but unused
elseif (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    # Apply these warnings only to C++ files, not CUDA
    add_compile_options("$<$<COMPILE_LANGUAGE:CXX>:-Wnon-virtual-dtor>") # Class has virtual functions, but its destructor is not virtual
    add_compile_options("$<$<COMPILE_LANGUAGE:CXX>:-Wreorder>") # Data member will be initialized after [other] data member
    add_compile_options("$<$<COMPILE_LANGUAGE:CXX>:-Wsometimes-uninitialized>") # Variable improperly initialized
    add_compile_options("$<$<COMPILE_LANGUAGE:CXX>:-Wunused-variable>") # Variable is defined but unused
endif()

# Executables
add_executable(302_raytracer ${EXTERNAL} ${SOURCE_302_RAYTRACER})

# Create an empty directory for storing the images
file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/res)

if(CUDA_FOUND)
    set_property(TARGET 302_raytracer PROPERTY CUDA_SEPARABLE_COMPILATION ON)
    target_link_libraries(302_raytracer curand)
    
    # CUDA optimization flags
    # Set CUDA architectures (adjust based on your GPU - this covers common GPUs)
    # sm_52 = GTX 9xx, sm_60 = GTX 10xx, sm_70 = V100, sm_75 = RTX 20xx, sm_80 = A100, sm_86 = RTX 30xx
    set(CMAKE_CUDA_ARCHITECTURES "52;60;70;75;80;86")
    
    # CUDA compiler flags for optimization and warning suppression
    target_compile_options(302_raytracer PRIVATE
        $<$<COMPILE_LANGUAGE:CUDA>:            
            -Xcompiler=-fno-strict-aliasing  # Optimize memory access
            --expt-relaxed-constexpr     # Allow relaxed constexpr
            --expt-extended-lambda       # Enable extended lambda support
            #-w                           # Suppress all CUDA warnings
            $<$<CONFIG:Release>:-O3>     # Maximum optimization for Release
            #$<$<CONFIG:Release>:--use_fast_math>  # Fast math for Release only
            $<$<CONFIG:Debug>:-O0>       # No optimization for Debug
            $<$<CONFIG:Debug>:-g>        # Generate host debug info
            $<$<CONFIG:Debug>:-lineinfo> # Generate line-number information (safer than -G)
        >
    )
    
    # Set device link options to suppress nvlink warnings
    set_target_properties(302_raytracer PROPERTIES
        CUDA_RESOLVE_DEVICE_SYMBOLS ON
        CUDA_SEPARABLE_COMPILATION ON
        CUDA_LINK_OPTIONS_INIT "-Xnvlink=--suppress-stack-size-warning,-w"
    )
    
    # Additional nvlink flags to suppress all warnings
    target_link_options(302_raytracer PRIVATE
        $<DEVICE_LINK:-Xnvlink=--suppress-stack-size-warning,-w>
    )
endif()